// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createHourse = `-- name: CreateHourse :exec
INSERT INTO hourse (
    section_id, link, layout, address, price, current_floor, total_floor,
    shape, age, area, main_area, raw)
VALUES (
    $1, $2, $3, $4, $5, $6,
    $7, $8, $9, $10, $11, $12)
ON CONFLICT (link)
DO UPDATE
SET updated_at = CURRENT_TIMESTAMP, price = EXCLUDED.price
`

type CreateHourseParams struct {
	SectionID    int32
	Link         string
	Layout       sql.NullString
	Address      string
	Price        int32
	CurrentFloor string
	TotalFloor   string
	Shape        string
	Age          string
	Area         string
	MainArea     sql.NullString
	Raw          json.RawMessage
}

func (q *Queries) CreateHourse(ctx context.Context, arg CreateHourseParams) error {
	_, err := q.db.ExecContext(ctx, createHourse,
		arg.SectionID,
		arg.Link,
		arg.Layout,
		arg.Address,
		arg.Price,
		arg.CurrentFloor,
		arg.TotalFloor,
		arg.Shape,
		arg.Age,
		arg.Area,
		arg.MainArea,
		arg.Raw,
	)
	return err
}

const getCities = `-- name: GetCities :many
SELECT name FROM city
`

func (q *Queries) GetCities(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHourses = `-- name: GetHourses :many
WITH duplicate_conditions AS (
    SELECT MIN(id) AS id, section_id, address, age, area
    FROM hourse
    WHERE link LIKE 'https://sale.591.com.tw/home%'
    AND updated_at > CURRENT_TIMESTAMP - INTERVAL '1 day'
    GROUP BY section_id, address, age, area
    HAVING count(1) > 1
),
duplicate AS (
    SELECT hourse.id
    FROM hourse
    INNER JOIN duplicate_conditions ON(
            hourse.section_id = duplicate_conditions.section_id
        AND hourse.address = duplicate_conditions.address
        AND hourse.age = duplicate_conditions.age
        AND hourse.area = duplicate_conditions.area
        AND hourse.link LIKE 'https://sale.591.com.tw/home%'
    )
    WHERE hourse.id NOT IN (SELECT id FROM duplicate_conditions)
    AND hourse.updated_at > CURRENT_TIMESTAMP - INTERVAL '1 day'
),
candidates AS (
    SELECT hourse.id
    FROM hourse
    LEFT JOIN section ON (section.id=hourse.section_id)
    LEFT JOIN city ON (city.id=section.city_id)
    WHERE hourse.updated_at > CURRENT_TIMESTAMP - INTERVAL '1 day'
    AND hourse.id NOT IN (SELECT id FROM duplicate)
    AND hourse.main_area IS NOT NULL
    AND (city.name IN ($3) OR COALESCE($3, '') = '')
    AND (section.name IN ($4) OR COALESCE($4, '') = '')
    AND ($5 = 0 OR hourse.price < $5)
    AND ($6 = 0 OR hourse.main_area > $6 :: DECIMAL)
    AND (hourse.shape IN ($7) OR COALESCE($7, '') = '')
    AND (
        CASE
        WHEN $8 :: BOOLEAN THEN hourse.current_floor != hourse.total_floor
        ELSE TRUE
        END
    )
)
SELECT
    hourse.id,
    CONCAT(city.name, section.name, hourse.address) :: TEXT AS address,
    city.name AS city,
    section.name AS section,
    hourse.price,
    hourse.current_floor,
    CONCAT(hourse.current_floor, '/', hourse.total_floor) :: TEXT AS floor,
    hourse.shape,
    hourse.age,
    hourse.main_area,
    hourse.area,
    section.name AS section,
    hourse.link,
    COALESCE(hourse.commit, '') AS commit,
    hourse.created_at,
    (SELECT COUNT(1) FROM candidates) AS total_count
FROM hourse
INNER JOIN candidates USING(id)
LEFT JOIN section ON (section.id=hourse.section_id)
LEFT JOIN city ON (city.id=section.city_id)
ORDER BY city.name, section.name, hourse.age, hourse.price, hourse.address
OFFSET $1 :: INTEGER LIMIT $2 :: INTEGER
`

type GetHoursesParams struct {
	OffsetParam      int32
	LimitParam       int32
	City             string
	Section          string
	MaxPrice         interface{}
	MinMainArea      interface{}
	Shape            string
	ExcludedTopFloor bool
}

type GetHoursesRow struct {
	ID           int64
	Address      string
	City         sql.NullString
	Section      sql.NullString
	Price        int32
	CurrentFloor string
	Floor        string
	Shape        string
	Age          string
	MainArea     sql.NullString
	Area         string
	Section_2    sql.NullString
	Link         string
	Commit       string
	CreatedAt    time.Time
	TotalCount   int64
}

func (q *Queries) GetHourses(ctx context.Context, arg GetHoursesParams) ([]GetHoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, getHourses,
		arg.OffsetParam,
		arg.LimitParam,
		arg.City,
		arg.Section,
		arg.MaxPrice,
		arg.MinMainArea,
		arg.Shape,
		arg.ExcludedTopFloor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHoursesRow
	for rows.Next() {
		var i GetHoursesRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.City,
			&i.Section,
			&i.Price,
			&i.CurrentFloor,
			&i.Floor,
			&i.Shape,
			&i.Age,
			&i.MainArea,
			&i.Area,
			&i.Section_2,
			&i.Link,
			&i.Commit,
			&i.CreatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSection = `-- name: GetSection :one
SELECT section.id, city_id, section.name, section.created_at, section.deleted_at, city.id, city.name, city.created_at, city.deleted_at
FROM section
LEFT JOIN city ON (section.city_id = city.id)
WHERE city.name = $1
AND section.name = $2
`

type GetSectionParams struct {
	City    string
	Section string
}

type GetSectionRow struct {
	ID          int64
	CityID      int32
	Name        string
	CreatedAt   time.Time
	DeletedAt   sql.NullTime
	ID_2        sql.NullInt64
	Name_2      sql.NullString
	CreatedAt_2 sql.NullTime
	DeletedAt_2 sql.NullTime
}

func (q *Queries) GetSection(ctx context.Context, arg GetSectionParams) (GetSectionRow, error) {
	row := q.db.QueryRowContext(ctx, getSection, arg.City, arg.Section)
	var i GetSectionRow
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Name,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.ID_2,
		&i.Name_2,
		&i.CreatedAt_2,
		&i.DeletedAt_2,
	)
	return i, err
}

const getSectionsByCity = `-- name: GetSectionsByCity :many
SELECT section.name
FROM section
LEFT JOIN city ON (section.city_id = city.id)
WHERE city.name = $1
`

func (q *Queries) GetSectionsByCity(ctx context.Context, cityName string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getSectionsByCity, cityName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionsWithCity = `-- name: GetSectionsWithCity :many
SELECT section.name AS section, city.name AS city
FROM section
LEFT JOIN city ON (section.city_id = city.id)
`

type GetSectionsWithCityRow struct {
	Section string
	City    sql.NullString
}

func (q *Queries) GetSectionsWithCity(ctx context.Context) ([]GetSectionsWithCityRow, error) {
	rows, err := q.db.QueryContext(ctx, getSectionsWithCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSectionsWithCityRow
	for rows.Next() {
		var i GetSectionsWithCityRow
		if err := rows.Scan(&i.Section, &i.City); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
