version: '3.7'

services:

  frontend:
    image: nginx:1.23.2-alpine
    container_name: hourse-frontend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./html:/var/www/html:ro
    logging:
      driver: json-file
      options:
        max-size: 50m
    ports:
      - 80:80
    depends_on:
      - backend
    networks:
      - hourse

  backend:
    image: golang:1.18-alpine
    container_name: hourse-backend
    working_dir: /server
    command: sh -c "go build -o app cmd/main.go && ./app"
    expose:
      - ${SERVICE_PORT}
    volumes:
      - ./hourse:/server:rw
      - ./hourse/gocache:/root/.cache/go-build:rw
      - ./hourse/gomodcache:/go/pkg/mod:rw
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=database
      - SERVICE_PORT=${SERVICE_PORT}
    logging:
      driver: json-file
      options:
        max-size: 50m
    depends_on:
      - database
    networks:
      - hourse

  database:
    image: postgres:15.0-alpine
    container_name: hourse-postgres
    volumes:
      - ./postgresdata:/var/lib/postgresql/data:rw
    expose:
      - ${POSTGRES_PORT}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    logging:
      driver: json-file
      options:
        max-size: 50m
    networks:
      - hourse

  rabbitmq:
    image: rabbitmq:3.11.2-management-alpine
    container_name: hourse-rabbitmq
    restart: always
    expose:
      - ${RABBITMQ_PORT}
    ports:
      - 50001:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
    logging:
      driver: json-file
      options:
        max-size: 50m
    volumes:
      - ./rabbitmqdata:/var/lib/rabbitmq:rw
    networks:
      - hourse

  consumer:
    build:
      context: python-platform
      dockerfile: fetch/build/dockerfile
    container_name: hourse-consumer
    image: hourse-consumer
    command: celery -A fetch worker -l WARNING --concurrency 1
    environment:
      - BROKER=pyamqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq/${RABBITMQ_DEFAULT_VHOST}
      - SERVICE_PORT=${SERVICE_PORT}
      - SERVICE_HOST=backend
    logging:
      driver: json-file
      options:
        max-size: 50m
    volumes:
      - ./python-platform:/app:ro
    restart: always
    depends_on:
      - rabbitmq
      - backend
    networks:
      - hourse

networks:
  hourse:
    driver: bridge
